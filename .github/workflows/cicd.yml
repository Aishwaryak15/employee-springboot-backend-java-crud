# Define the CI/CD Workflow for Java code
name: CI-CD Workflow for java code

# Trigger the workflow on pushes to the specified branch
on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'sonic-fiber-460609-q4' # update to your Google Cloud project ID
  REGION: 'us-central1' # update to your region
  REPOSITORY: 'gke-runner-repo'
  # SERVICE: 'my-cloudrun-service' # Uncomment if deploying to Cloud Run

# Add "id-token" with the intended permissions.
permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  # CI job
  build:
    # IMPORTANT: Use the correct runs-on label for your runner scale set.
    # Based on your Helm installation, it should be 'github-runner-scale-set'.
    runs-on: self-hosted

    # Define the steps to be executed in the job
    steps:
    # Checkout the repository to access source code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Maven
      run: |
        sudo apt-get update
        sudo apt-get install -y maven

    # Run unit tests using maven goal
    - name: Run unit test
      run: mvn test

    # Generate code-coverage report using jacoco
    - name : Get code-coverage report
      run : mvn jacoco:report

    # Upload code-coverage report as an artifact
    - name: Code Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: Code Coverage Reports
        path: target/site/jacoco/index.html # Code coverage report will be generate at 'target/site/jacoco/index.html'

    # Build the project and package jar
    - name: Build project and package jar
      run: mvn package

# Authenticate to Google Cloud using OIDC (Workload Identity)
    - name: Authenticate to Google Cloud using OIDC
      id: auth
      uses: google-github-actions/auth@v2
      with:
        token_format: 'access_token'
        # CORRECTED: Use the Workload Identity Pool and Provider names from the Canvas document setup
        workload_identity_provider: 'projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

    # Configure Docker to authenticate with Artifact Registry
    - name: Configure Docker to Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    # List Workspace Contents (DEBUGGING - remove after verification)
    - name: List Workspace Contents (DEBUGGING)
      run: ls -l ${{ github.workspace }}

    # Build and Push Container to Artifact Registry
    # This step combines building the Docker image and pushing it.
    - name: Build and Push Container to Artifact Registry
      run: |
        # Define the Docker image name using environment variables and commit SHA
        DOCKER_IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ github.sha }}"
        
        # Build the Docker image from the current directory (where Dockerfile is)
        docker build -t $DOCKER_IMAGE .
        
        # Push the built Docker image to Artifact Registry
        docker push $DOCKER_IMAGE

